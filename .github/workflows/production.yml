name: Unit Test
on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:
env:
  PJ_ACTOR: toposoid
  PJ_REPO: toposoid-sentence-transformer-neo4j
  PJ_BRANCH: main
  PJ_VERSION: 0.5
jobs:
  unit-test_toposoid-sentence-transformer-neo4j:
    runs-on: self-hosted
    steps:
      - name: Clone ${{ env.PJ_REPO }}
        uses: actions/checkout@v3
        with:
            repository: ${{ env.PJ_ACTOR }}/${{ env.PJ_REPO }}
      - name: Execute tests
        run: |
            cd ${GITHUB_WORKSPACE} && cd ../
            cd ./${{ env.PJ_REPO }}
            docker rm --force $(docker ps -a -q) > /dev/null 2>&1 && :
            docker rmi --force ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}　> /dev/null 2>&1 && :
            docker rmi --force toposoid/toposoid-scala-lib:${{ env.PJ_VERSION }}> /dev/null 2>&1 && :
            docker images
            docker system prune -f
            docker volume prune -f          
            docker build --build-arg TARGET_BRANCH=${{ env.PJ_BRANCH }} --tag ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }} -f Dockerfile-workflow --no-cache .
            docker compose -f docker-compose-workflow.yml up -d toposoid-sentence-transformer-neo4j
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt headerCheck"
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt test:headerCheck"
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt compile"
            docker compose -f docker-compose-workflow.yml up -d neo4j
            docker compose -f docker-compose-workflow.yml up -d toposoid-common-nlp-japanese-web
            docker compose -f docker-compose-workflow.yml up -d toposoid-sentence-parser-japanese-web
            docker compose -f docker-compose-workflow.yml up -d data-accessor-neo4j-web
            curl --retry 10 --retry-delay 5 --retry-all-errors -X POST http://localhost:7474
            curl --retry 10 --retry-delay 5 --retry-all-errors -X POST -H "Content-Type: application/json" -d '{"sentence": "これはテストです。"}' http://localhost:9006/getFeatureVector
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*TransformerJapaneseTest'"
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*ImageJapaneseTest'"
            docker compose -f docker-compose-workflow.yml rm -fsv toposoid-common-nlp-japanese-web
            docker compose -f docker-compose-workflow.yml rm -fsv toposoid-sentence-parser-japanese-web
            docker compose -f docker-compose-workflow.yml up -d corenlp
            docker compose -f docker-compose-workflow.yml up -d toposoid-common-nlp-english-web
            docker compose -f docker-compose-workflow.yml up -d toposoid-sentence-parser-english-web
            curl --retry 10 --retry-delay 5 --retry-all-errors -X POST  -d 'Life is beautiful.' http://localhost:9000
            curl --retry 10 --retry-delay 5 --retry-all-errors -X POST -H "Content-Type: application/json" -d '{"sentence": "This is a test"}' http://localhost:9008/getFeatureVector
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*TransformerEnglishTest'"
            docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*ImageEnglishTest'"
            docker rm --force $(docker ps -a -q) > /dev/null 2>&1 && :
            docker rmi --force ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}
      - name: Clone toposoid-scala-lib
        uses: actions/checkout@v3
        with:
          repository: ${{ env.PJ_ACTOR }}/toposoid-scala-lib
          ref: ${{ env.PJ_BRANCH }}
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v3
        with:
          images: toposoid/toposoid-scala-lib:${{ env.PJ_VERSION }}
      - name: Login to CR
        uses: docker/login-action@v2
        with:
          username: toposoid
          password: ${{ secrets.CR_TOKEN }}
      - name: Build And Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: toposoid/toposoid-scala-lib:${{ env.PJ_VERSION }}
          build-args: |
            TARGET_BRANCH=${{ env.PJ_BRANCH }}
